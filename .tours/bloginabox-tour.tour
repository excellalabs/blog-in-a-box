{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Dev Container Tour",
  "steps": [
    {
      "file": ".devcontainer/devcontainer.json",
      "description": "Blog in a box is made to run in something called a \"dev container\". This means that all of the dependencies -- ruby, jekyll, the right version of node, the tooling packages -- are all wrapped up in a container that you can open this code in. You can do that within VS Code, or you can do it via GitHub Codespaces and develop in the browser, all while getting the same consistent tooling.",
      "line": 2
    },
    {
      "file": ".devcontainer/devcontainer.json",
      "description": "We have a custom Docker file that we use to create our dev container. We'll get to that in a little bit.",
      "line": 4
    },
    {
      "file": ".devcontainer/devcontainer.json",
      "description": "Our dev container forwards port `4000`, because this is the port that Jekyll serves on. This allows that port to be accessible to the outside world (if you allow it to be), so that you can preview your site locally, etc.",
      "line": 6
    },
    {
      "file": ".devcontainer/devcontainer.json",
      "description": "We have a number of extensions we will install by default in the dev container because we believe they'll be helpful to you. We'll explain each of them below.",
      "line": 7
    },
    {
      "file": ".devcontainer/devcontainer.json",
      "description": "This extension will highlight spelling errors and allow you to add words to the dictionary. Our build process uses the same tool to check for spelling errors, so this helps you prevent any issues right in the editor at composition time.",
      "line": 8
    },
    {
      "file": ".devcontainer/devcontainer.json",
      "description": "This helps you see what indent line you're on because each indent gets a different color.",
      "line": 9
    },
    {
      "file": ".devcontainer/devcontainer.json",
      "description": "Markdown shortcuts allow you to use the command pallette in VS Code (`CTRL + Shift + P` on Windows) to do things like convert a list of text to bullets, etc. etc. -- it makes the editing experience a little easier working with Markdown.",
      "line": 10
    },
    {
      "file": ".devcontainer/devcontainer.json",
      "description": "This is the extension that surfaces issues with Markdown formatting within your files. This is the same tooling that the build process uses to check for errors, and it allows you to correct them right within the editor.",
      "line": 11
    },
    {
      "file": ".devcontainer/devcontainer.json",
      "description": "If you have to edit a YAML file, this helps you find errors / issues in your formatting.",
      "line": 12
    },
    {
      "file": ".devcontainer/devcontainer.json",
      "description": "This extension is for Code Tours, which is what this guidance is. :) ",
      "line": 13
    },
    {
      "file": ".devcontainer/devcontainer.json",
      "description": "An extension that allows you to sign into Github and create pull requests without leaving the editor.",
      "line": 14
    },
    {
      "file": ".devcontainer/aliases.sh",
      "description": "This is the aliases file. We use this to create some \"shortcuts\". When you open the terminal within the devcontainer, you can for example type `build` rather than the longer jekyll build statement. The aliases commands tend to ensure that you're in the right folder within the container as well.",
      "line": 1
    },
    {
      "file": ".devcontainer/Dockerfile",
      "description": "Our Dockerfile is what actually builds and drives the development environment.\n\nWe previously pulled from the official Jekyll images, but found those to not be nearly as flexible as we needed them to be.\n\nSo now, we pull from the base Ruby image, at a version compatible with GitHub pages. We then install node and our packages into that images ourselves.\n\nIn the future, we'll probably move this into its own container so that it won't have to build each time, and thus dev environments will start much faster.",
      "line": 1
    },
    {
      "file": ".devcontainer/Dockerfile",
      "description": "Here, we use the `ARG` command -- this lets us set a variable at build time to specify the ruby version. ",
      "line": 5
    },
    {
      "file": ".devcontainer/Dockerfile",
      "description": "This pulls the container from the official ruby container at the specified version.",
      "line": 8
    },
    {
      "file": ".devcontainer/Dockerfile",
      "description": "We also set variables for GH Pages and the node major version. The goal is to use the GitHub pages dependency and try to keep all the things synced up for the right versions.",
      "line": 10
    },
    {
      "file": ".devcontainer/Dockerfile",
      "description": "Feel free to reach out to me anytime via https://SeanKilleen.com as well.",
      "line": 13
    },
    {
      "file": ".devcontainer/Dockerfile",
      "description": "Ensures we can do git stuff in the dev container",
      "line": 26
    },
    {
      "file": ".devcontainer/Dockerfile",
      "description": "Ensures we have updated time zone info.",
      "line": 27
    },
    {
      "file": ".devcontainer/Dockerfile",
      "description": "`dos2unix` is used to make sure our alias file, which might be edited on Windows, always has the appropriate character encoding in unix environments.",
      "line": 28
    },
    {
      "file": ".devcontainer/Dockerfile",
      "description": "Here's where we install node, passing the major version we want to the curl URL for nodesource.",
      "line": 36
    },
    {
      "file": ".devcontainer/Dockerfile",
      "description": "We do this just to ensure we know what versions we're using in the container. Just a reference for us at build time more than anything.",
      "line": 44
    },
    {
      "file": ".devcontainer/Dockerfile",
      "description": "We copy the aliases to the profile directory. Initially we thought this would automatically add them, but it does not, which is all good. We still keep them there just because it seems like a fine place for them.",
      "line": 48
    },
    {
      "file": ".devcontainer/Dockerfile",
      "description": "Here, we add our alias file to the bash profile. This way, when an interactive prompt shows up, the aliases will already be loaded, and you can type `localdev` or `spellcheck`, etc. and have it just work.",
      "line": 53
    },
    {
      "file": ".devcontainer/Dockerfile",
      "description": "We expose port `4000` here because that's what Jekyll runs on by default. This will ensure that the Jekyll _inside_ the container can get _outside_ the container, which allows the Codespaces dev container to host it on a web site that you can visit.",
      "line": 55
    }
  ]
}